import { useMemo } from "react";

import type { SessionDetailDTO } from "@/types";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { AlertCircle, CheckCircle2, Edit3, InfoIcon, Play, Trash2 } from "lucide-react";

type SessionActionHandler = (session: SessionDetailDTO) => void;

interface ActiveSessionCardProps {
  session: SessionDetailDTO;
  onStart?: (sessionId: string) => void;
  onComplete?: SessionActionHandler;
  onFail?: SessionActionHandler;
  onEdit?: SessionActionHandler;
  onDelete?: SessionActionHandler;
  isProcessing?: boolean;
}

const statusVariant: Record<
  SessionDetailDTO["status"],
  { label: string; variant: "outline" | "default" | "secondary" | "destructive" }
> = {
  planned: { label: "Planned", variant: "secondary" },
  in_progress: { label: "In progress", variant: "default" },
  completed: { label: "Completed", variant: "secondary" },
  failed: { label: "Failed", variant: "destructive" },
};

export function ActiveSessionCard({
  session,
  onStart,
  onComplete,
  onFail,
  onEdit,
  onDelete,
  isProcessing,
}: ActiveSessionCardProps) {
  const actions = useMemo(() => new Set(session.actions), [session.actions]);
  const { label, variant } = statusVariant[session.status];

  return (
    <Card className="border-border/80" data-testid="active-session-card">
      <CardHeader className="gap-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Badge variant={variant}>{label}</Badge>
            <CardTitle className="text-base font-semibold">Active session</CardTitle>
          </div>
          <CardDescription className="text-xs capitalize text-muted-foreground">
            {new Date(session.sessionDate).toLocaleString()}
          </CardDescription>
        </div>
        <CardDescription>
          {session.isAiGenerated ? "Generated by AI" : "Created manually"}
          {session.isModified ? " Â· Modified" : null}
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-5">
        <div>
          <div className="mb-2 flex items-center justify-between text-sm font-medium text-muted-foreground">
            <span>Sets</span>
            <span>Total reps: {session.totalReps}</span>
          </div>
          <div className="grid grid-cols-5 gap-2">
            {session.sets.map((reps, index) => (
              <div key={index} className="flex flex-col items-center rounded-lg border bg-accent/40 px-2 py-2">
                <span className="text-xs text-muted-foreground">Set {index + 1}</span>
                <span className="text-base font-semibold">{reps ?? "-"}</span>
              </div>
            ))}
          </div>
        </div>

        <div className="flex flex-wrap items-center gap-2">
          {actions.has("start") && onStart ? (
            <Button
              size="sm"
              onClick={() => onStart(session.id)}
              disabled={isProcessing || session.status !== "planned"}
              className="flex items-center gap-2"
              data-testid="session-start-button"
            >
              <Play className="size-4" />
              Start
            </Button>
          ) : null}

          {actions.has("complete") && onComplete ? (
            <Button
              size="sm"
              onClick={() => onComplete(session)}
              disabled={isProcessing}
              className="flex items-center gap-2"
              data-testid="session-complete-button"
            >
              <CheckCircle2 className="size-4" />
              Complete
            </Button>
          ) : null}

          {actions.has("fail") && onFail ? (
            <Button
              size="sm"
              variant="outline"
              onClick={() => onFail(session)}
              disabled={isProcessing}
              className="flex items-center gap-2"
            >
              <AlertCircle className="size-4" />
              Fail
            </Button>
          ) : null}

          {actions.has("edit") && onEdit ? (
            <Button
              size="sm"
              variant="outline"
              onClick={() => onEdit(session)}
              disabled={isProcessing || !session.canEdit}
              className="flex items-center gap-2"
            >
              <Edit3 className="size-4" />
              Edit
            </Button>
          ) : null}

          {actions.has("delete") && onDelete ? (
            <Button
              size="sm"
              variant="destructive"
              onClick={() => onDelete(session)}
              disabled={isProcessing || !session.canDelete}
              className="flex items-center gap-2"
              data-testid="session-delete-button"
            >
              <Trash2 className="size-4" />
              Delete
            </Button>
          ) : null}
        </div>

        {session.aiComment ? (
          <div className="flex items-start gap-2 rounded-lg border border-primary/20 bg-primary/5 p-3 text-sm text-primary/90">
            <InfoIcon className="mt-0.5 size-4" aria-hidden="true" />
            <p className="leading-snug">
              {session.aiComment}
              {session.isModified ? (
                <span className="ml-2 text-xs uppercase tracking-wide text-primary">(modified)</span>
              ) : null}
            </p>
          </div>
        ) : null}
      </CardContent>
    </Card>
  );
}
